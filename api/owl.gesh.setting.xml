<?xml version="1.0" encoding="UTF-8"?>

<node name="">
    <interface name="owl.gesh.setting">
        <!--
            SettingsUpdated:
            @updated: Updated settings, key and value.
            @invalidated: Invalidated settings.

            Emitted when one or more settings change value.
        -->
        <signal name="SettingsUpdated">
            <arg type="a{sv}" name="updated" />
            <arg type="as" name="invalidated" />
        </signal>
        <!--
            Get:
	    @names: List of setting names.
	    @values: Requested keys and values.
	    @errors: Rejected keys and reject reason.

	    Get a collection of settings.
        -->
        <method name="Get">
            <arg type="as" name="names" direction="in" />
            <arg type="a{sv}" name="values" direction="out" />
            <arg type="a{ss}" name="errors" direction="out" />
        </method>
        <!--
            GetAll:
        @settings: Key-value pairs with setting name as key, values:
                    * Setting rule
                    * Setting flags (as defined by dbus::flags)
                    * Setting value (invalid if dbus::flags::NO_VALUE is set)

        Get all active settings provided by the D-Bus object that the client is
        allowed to either read or write.
        -->
        <method name="GetAll">
            <arg type="a{s(siv)}" name="settings" direction="out" />
        </method>
        <!--
            Set:
	    @layer: Layer to which the settings shall be saved
	    @update: Setting names and values that should be updated.
	    @invalidate: Setting names that should be invalidated (cleared).

	    Set settings based on the provided settings names and values.
        -->
        <method name="Set">
            <arg type="s" name="layer" direction="in" />
            <arg type="a{sv}" name="update" direction="in" />
            <arg type="as" name="invalidate" direction="in" />
        </method>
    </interface>
</node>
